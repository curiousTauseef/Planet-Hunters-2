{
  "name": "zootorial",
  "version": "0.4.12",
  "main": "./zootorial.js",
  "devDependencies": {
    "coffee-script": "~1.6.2",
    "easy-exec": "~0.0.5",
    "nib": "~0.9.1",
    "silver-server": "~0.1.0",
    "stylus": "~0.32.0"
  },
  "scripts": {
    "start": "cake serve"
  },
  "readme": "zootorial\n\nTutorial\n========\n\nConstructor parameters\n----------------------\n\n* `parent`\n\n    Element at which to insert the tutorial's elements\n\n* `steps`\n\n    Object of steps, see **Steps** below\n\n* `first`\n\n    The key of the first step\n\n* `demoLabel`, `nextLabel`, `doneLabel`\n\n    Default labels for the \"demo\", \"next\", and \"done\" buttons\n\nProperties\n----------\n\n* `el`\n\n    Contains all the tutorial content.\n\n* `closeButton`\n\n    Aborts the tutorial\n\n* `header`, `content`\n\n    Contains the `header` and `content` specified in the current step, if defined.\n\n* `instruction`\n\n    Includes the `instruction` property in the current step and a button to call the step's `demo` function if one is defined.\n\n* `footer`\n\n    Contains the \"next\" button.\n\nMethods\n-------\n\n* `start()`\n\n    Start the tutorial.\n\n* `end()`\n\n    End the tutorial.\n\n* `goTo(step)`\n\n    If it's a string, go to that step in the `steps` object.\n\n    If it's a function, it's evaluated and the result is passed back to `goTo`.\n\n    If it's `false`, the step will not change, but the `instruction` element will get a `data-zootorial-attention` attribute.\n\n    If it's `null` or not defined, the tutorial will end.\n\nHelpers\n-------\n\n* `triggerEvent(eventName)`\n\n    Dispatch a custom event from the tutorial's `el` element.\n\n* `createElement(tagAndClassNames, parent)`\n\n    Create an element (e.g. \"button.hello\") at a parent.\n\n* `current`\n\n    The current step as it was passed into `steps`\n\nHooks\n-----\n\n* `onBeforeStart()`\n\n* `onStart()`\n\n* `onBeforeEnd()`\n\n* `onEnd()`\n\n* `onBeforeBeforeLoadStep()`\n\n* `onLoadStep()`\n\n* `onBeforeUnloadStep()`\n\n* `onUnloadStep()`\n\nEvents\n------\n\nDispatched from `el`. You should probably reference these, e.g. `addEventListener(tutorialInstance.startEvent, handler, false)`, in case the specific strings change\n\n* `startEvent`\n\n* `endEvent`\n\n* `loadStepEvent`\n\n* `unloadStepEvent`\n\n* `abortEvent`\n\n\n\"Step\" objects\n==============\n\nParameters\n----------\n\n* `header`\n\n    String of HTML for a header\n\n* `content`\n\n    String of HTML for content\n\n* `instruction`\n\n    String of HTML for instructional content\n\n* `demo()`\n\n    Function that shows the user what to do. Check out my `ghost-mouse` for a nice way to drive a dmeo.\n\n* `attachment`\n\n    An array `[X of tutorial, Y of tutorial, target selector, X of target, Y of target]`. The tutorial dialog will be positioned so that the X and Y defined will match up with the X and Y of the target. E.g. `[0, 0, '.target', 0, 0]` will align the top-left corners of the tutorial and the target, and `[0, 0.5, '.target', 1, 0.5]` will stick the tutorial to the right side of the target, cenetered vertically.\n\n    If `attachment` is `false`, the dialog will not move from the last step's position.\n\n* `progress`\n\n    The number of progress dots to fill up\n\n* `arrow`\n\n    Set the `data-zootorial-position` property, which you can then style apropriately\n\n* `block`\n\n    A CSS selector; block clicks to the matched elements until the step is exited.\n\n* `focus`\n\n    A CSS selector; the matched element will be \"highlighted\" (everything around it will be dimmed).\n\n* `actionable`\n\n    A CSS selector; matched elements will be given a `data-zootorial-actionable` property.\n\n* `next`\n\n    If it's an object, keys are event/selector combos (e.g. `click button[name='complete-task']`) and values are passed to the tutorial's `goTo` method when that event is dispatched from that selector. No \"next\" button is drawn.\n\n    If it's a string, function, `null`, or not defined, this is passed directly to the tutorial's `goTo` method and either a \"next\" or \"done\" button is drawn in the footer.\n\nHooks\n-----\n\n* `onBeforeLoad()`\n\n* `onLoad()`\n\n* `onBeforeUnload()`\n\n* `onUnload()`\n",
  "readmeFilename": "README.md",
  "description": "zootorial",
  "_id": "zootorial@0.4.12",
  "dist": {
    "shasum": "d07339a9f78771379bc585b69aecdbca56c57d89"
  },
  "_from": "zootorial@",
  "_resolved": "https://registry.npmjs.org/zootorial/-/zootorial-0.4.12.tgz"
}
